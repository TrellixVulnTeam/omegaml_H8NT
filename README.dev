What you need
-------------

Docker
Docker-compose
RabbitMq (docker image)
MongoDB (docker image)
MySQL (docker image)

To use behave
- see https://sites.google.com/a/chromium.org/chromedriver/downloads
- make sure chromedriver is in /usr/local/bin

On MacOS you also need
    brew

MacOS developers:
    You need to install gnu-sed and grealpath from core-utils for
    rundev.sh to work:

    $ brew install gnu-sed coreutils
    $ ln -fs /usr/local/bin/gsed /usr/local/bin/sed
    $ ln -fs /usr/local/bin/grealpath /usr/local/bin/realpath

Clone the repositories
----------------------

This is the README for the commercial version, omegaml-enterprise. However
we also need omegaml core (open source) to be able to work effectively.

    $ git clone git@github.com:omegaml/omegaml-enterprise.git omegaml
    $ git clone git@github.com:omegaml/omegaml.git omegaml-ce

How to build your development environment
-----------------------------------------

Credit where credit is due:

    Thanks to the foresight of contributor ackarapazar we have a fully
    dockerized development environment that work's across platforms,
    so you don't need to install any local software (other then above
    dependencies).

In general you should be able to follow these steps:

1. Run the development docker image shell as your development shell

    $ scripts/rundev.sh --docker --clean --shell

    Note you only need the --clean parameter on your first start.
    It initialises all containers and sets up the environment.

2. Check everything is running fine

    $ scripts/rundev.sh --docker --shell
    (omegaml-dev)$ make test

3. Edit files in your local directory (where you cloned the repos)

    The omegaml-dev image links your local directories as follows.
    See docker-compose.dev.yml:omegaml-dev:volumes

    # local => container
    ../omegaml => ./omegaml
    ../omegaml-ce => ./omegaml-ce

In rare cases only you may need to re-build the development docker
image, such as when you need to introduce additional requirements:

Build the development docker image and start from a clean state
(this is one-time only lest new dependencies, can take up to 20 minutes)

    $ scripts/rundev.sh --build --clean

Other Dependencies
------------------

* conda - we use version < 4.6 due to a nasty bug in conda 4.6.x
  https://github.com/conda/conda/issues/7918

  $ conda create -n omegamlee python=3

* install all the software required

   $ conda install --file conda-requirements.txt
   $ pip install --ignore-installed -r pip-requirements.txt
   $ pip install --ignore-installed -r requirements.extra

Setup
-----

Configure jupyter hub user. This must match the OMEGA_JYHUB_USER and OMEGA_JYHUB_APIKEY env variables
on web and omjobs.

    $ manage.py omsetupuser --username jyadmin --apikey b7b034f57d442e605ab91f88a8936149e968e12e --staff

Execute locally
---------------

Start omegaml-dev, mongo db & rabbitmq services and their dependencies using
Docker. This will start a shell:

    $ scripts/rundev.sh --docker --shell

Run unit tests

    omegaml-dev $ make test

Run services

    omegaml-dev $ scripts/rundev.sh

Run livetests

    omegaml-dev $ scripts/devtest.sh --headless

Start services manually using honcho::

   omegaml-dev $ PORT=8000 honcho start web notebook worker
   # PORT=8000 sets the web apps server in conf_gunicorn

Test locally
------------

There are different options:

1. Run the unit tests in place

   omgeml-dev $ make test

2. Run everything from local sources so you can interact with it

   omgeml-dev $ scripts/rundev.sh

2. Run everything from local sources then run the livetest against it (headless)

   omgeml-dev $ make devtest

Local Kubernetes Deployment
---------------------------

1. install microk8s
2. enable the private docker repo:

    # see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-in-the-cluster-that-holds-your-authorization-token
    $ kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>

3. set the kubernetes configuration

    # see https://microk8s.io/docs/  "Accessing kubernetes"
    # -- be sure to use microk8s.kubectl and not kubectl, even if aliased
    #    as kubectl.config does not output the actual microk8s config
    # $ microk8s.kubectl config view --raw > $HOME/.kube/config


Build a release for testing
---------------------------

$ make dist

This
1. builds all packages from local sources
2. builds the omegaee docker images
3. runs livetest against this docker imgae


Build a release for distribution
--------------------------------

$ make dist-prod

Same thing as building for test, but minifies all sources first.

Push final release to dockerhub
-------------------------------

$ make release-docker

Runs make dist-prod then pushes omegaee image to dockerhub tagged as release and latest
