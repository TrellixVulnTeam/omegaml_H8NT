What you need
-------------

MySql
RabbitMq
MongoDB

To use behave
https://sites.google.com/a/chromium.org/chromedriver/downloads

Dependencies
------------

* conda - we use version < 4.6 due to a nasty bug in conda 4.6.x
  https://github.com/conda/conda/issues/7918


* install all the software required

   $ conda install --file conda-requirements.txt
   $ pip install --file pip-requirements.txt
   $ pip install --file requirements.dev

Setup
-----

Configure jupyter hub user. This must match the OMEGA_JYHUB_USER and OMEGA_JYHUB_APIKEY env variables
on web and omjobs.

    $ manage.py omsetupuser --username jyadmin --apikey b7b034f57d442e605ab91f88a8936149e968e12e --staff

Execute locally
---------------

    Start mongo db for dev purpose. Will be served on port 27019

    $ docker-compose -f docker-compose-dev.yml up -d
    $ rm db.sqlite3 # optional
    $ scripts/initlocal.sh

Start services using honcho::

    # PORT=8000 sets the web apps server in conf_gunicorn
    $ PORT=8000 honcho start web notebook worker

* PORT=8000 sets the web apps server in conf_gunicorn

Test locally
------------

There are different options:

1. Run the unit tests in place

   $ make test

2. Run everything from local sources so you can interact with it

   $ scripts/rundev.sh

2. Run everything from local sources then run the livetest against it (headless)

   $ make devtest

Local Kubernetes Deployment
---------------------------

1. install microk8s
2. enable the private docker repo:

    # see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-in-the-cluster-that-holds-your-authorization-token
    $ kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>

3. set the kubernetes configuration

    # see https://microk8s.io/docs/  "Accessing kubernetes"
    # -- be sure to use microk8s.kubectl and not kubectl, even if aliased
    #    as kubectl.config does not output the actual microk8s config
    # $ microk8s.kubectl config view --raw > $HOME/.kube/config


Build a release for testing
---------------------------

$ make dist

This
1. builds all packages from local sources
2. builds the omegaee docker images
3. runs livetest against this docker imgae


Build a release for distribution
--------------------------------

$ make dist-prod

Same thing as building for test, but minifies all sources first.

Push final release to dockerhub
-------------------------------

$ make releae-docker

Runs make dist-prod then pushes omegaee image to dockerhub tagged as release and latest